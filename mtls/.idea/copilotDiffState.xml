<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/mtls/RestTemplateConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/mtls/RestTemplateConfig.java" />
              <option name="updatedContent" value="package com.example.mtls;&#10;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;&#10;import org.springframework.web.client.RestTemplate;&#10;&#10;import javax.net.ssl.SSLContext;&#10;import java.io.InputStream;&#10;import java.security.KeyStore;&#10;import org.apache.http.conn.ssl.SSLConnectionSocketFactory;&#10;import org.apache.http.impl.client.CloseableHttpClient;&#10;import org.apache.http.impl.client.HttpClients;&#10;import org.apache.http.ssl.SSLContexts;&#10;&#10;@Configuration&#10;public class RestTemplateConfig {&#10;&#10;    @Value(&quot;${resttemplate.ssl.key-store}&quot;)&#10;    private String keyStorePath;&#10;&#10;    @Value(&quot;${resttemplate.ssl.key-store-password}&quot;)&#10;    private String keyStorePassword;&#10;&#10;    @Value(&quot;${resttemplate.ssl.key-store-type}&quot;)&#10;    private String keyStoreType;&#10;&#10;    @Value(&quot;${resttemplate.ssl.trust-store}&quot;)&#10;    private String trustStorePath;&#10;&#10;    @Value(&quot;${resttemplate.ssl.trust-store-password}&quot;)&#10;    private String trustStorePassword;&#10;&#10;    @Value(&quot;${resttemplate.ssl.trust-store-type}&quot;)&#10;    private String trustStoreType;&#10;&#10;    @Bean&#10;    public RestTemplate restTemplate() throws Exception {&#10;        KeyStore keyStore = KeyStore.getInstance(keyStoreType);&#10;        try (InputStream keyStoreStream = getClass().getClassLoader().getResourceAsStream(keyStorePath.replace(&quot;classpath:&quot;, &quot;&quot;))) {&#10;            keyStore.load(keyStoreStream, keyStorePassword.toCharArray());&#10;        }&#10;&#10;        KeyStore trustStore = KeyStore.getInstance(trustStoreType);&#10;        try (InputStream trustStoreStream = getClass().getClassLoader().getResourceAsStream(trustStorePath.replace(&quot;classpath:&quot;, &quot;&quot;))) {&#10;            trustStore.load(trustStoreStream, trustStorePassword.toCharArray());&#10;        }&#10;&#10;        SSLContext sslContext = SSLContexts.custom()&#10;                .loadKeyMaterial(keyStore, keyStorePassword.toCharArray())&#10;                .loadTrustMaterial(trustStore, null)&#10;                .build();&#10;&#10;        SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslContext);&#10;        CloseableHttpClient httpClient = HttpClients.custom()&#10;                .setSSLSocketFactory(socketFactory)&#10;                .build();&#10;&#10;        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory(httpClient);&#10;        return new RestTemplate(factory);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../mtls2/src/main/java/org/example/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../mtls2/src/main/java/org/example/Main.java" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(Main.class, args);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../service-a/src/main/java/com/example/servicea/ServiceAController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../service-a/src/main/java/com/example/servicea/ServiceAController.java" />
              <option name="originalContent" value="package com.example.servicea;&#10;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import java.util.Map;&#10;&#10;@RestController&#10;public class ServiceAController {&#10;&#10;    @GetMapping(&quot;/service-a/hello&quot;)&#10;    public Map&lt;String,String&gt; hello() {&#10;        return Map.of(&quot;service&quot;,&quot;A&quot;, &quot;message&quot;,&quot;Hello from Service A&quot;);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.servicea;&#10;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import java.util.Map;&#10;&#10;@RestController&#10;public class ServiceAController {&#10;&#10;    @Value(&quot;${server.port}&quot;)&#10;    private String serverPort;&#10;&#10;    @GetMapping(&quot;/service-a/hello&quot;)&#10;    public Map&lt;String,String&gt; hello() {&#10;        return Map.of(&#10;            &quot;service&quot;, &quot;A&quot;, &#10;            &quot;message&quot;, &quot;Hello from Service A&quot;, &#10;            &quot;port&quot;, serverPort,&#10;            &quot;instance&quot;, &quot;service-a-&quot; + serverPort&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../service-b/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../service-b/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.1.8&lt;/version&gt;&#10;        &lt;relativePath/&gt;&#10;    &lt;/parent&gt;&#10;    &lt;groupId&gt;com.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;service-b&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0.0&lt;/version&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;    &lt;dependencyManagement&gt;&#10;        &lt;dependencies&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;&#10;                &lt;version&gt;2022.0.4&lt;/version&gt;&#10;                &lt;type&gt;pom&lt;/type&gt;&#10;                &lt;scope&gt;import&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;        &lt;/dependencies&gt;&#10;    &lt;/dependencyManagement&gt;&#10;&lt;/project&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.1.8&lt;/version&gt;&#10;        &lt;relativePath/&gt;&#10;    &lt;/parent&gt;&#10;    &lt;groupId&gt;com.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;service-b&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0.0&lt;/version&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;    &lt;dependencyManagement&gt;&#10;        &lt;dependencies&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;&#10;                &lt;version&gt;2022.0.4&lt;/version&gt;&#10;                &lt;type&gt;pom&lt;/type&gt;&#10;                &lt;scope&gt;import&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;        &lt;/dependencies&gt;&#10;    &lt;/dependencyManagement&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../service-b/src/main/java/com/example/serviceb/CacheController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../service-b/src/main/java/com/example/serviceb/CacheController.java" />
              <option name="originalContent" value="package com.example.serviceb;&#10;&#10;import com.netflix.discovery.EurekaClient;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.cloud.client.discovery.DiscoveryClient;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/cache&quot;)&#10;public class CacheController {&#10;&#10;    @Autowired&#10;    private EurekaClient eurekaClient;&#10;&#10;    @Autowired&#10;    private DiscoveryClient discoveryClient;&#10;&#10;    @PostMapping(&quot;/clear&quot;)&#10;    public String clearCache() {&#10;        try {&#10;            // Force refresh the local cache from Eureka server&#10;            eurekaClient.getApplications(true);&#10;            return &quot;Cache cleared and refreshed successfully!&quot;;&#10;        } catch (Exception e) {&#10;            return &quot;Failed to clear cache: &quot; + e.getMessage();&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/refresh&quot;)&#10;    public String refreshServices() {&#10;        try {&#10;            // Get fresh list of services&#10;            var services = discoveryClient.getServices();&#10;            return &quot;Services refreshed: &quot; + services.toString();&#10;        } catch (Exception e) {&#10;            return &quot;Failed to refresh services: &quot; + e.getMessage();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.serviceb;&#10;&#10;import com.netflix.discovery.EurekaClient;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.cloud.client.discovery.DiscoveryClient;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/cache&quot;)&#10;public class CacheController {&#10;&#10;    @Autowired&#10;    private EurekaClient eurekaClient;&#10;&#10;    @Autowired&#10;    private DiscoveryClient discoveryClient;&#10;&#10;    @PostMapping(&quot;/clear&quot;)&#10;    public String clearCache() {&#10;        try {&#10;            // Force refresh the local cache from Eureka server&#10;            eurekaClient.getApplications();&#10;            return &quot;Cache cleared and refreshed successfully!&quot;;&#10;        } catch (Exception e) {&#10;            return &quot;Failed to clear cache: &quot; + e.getMessage();&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/refresh&quot;)&#10;    public String refreshServices() {&#10;        try {&#10;            // Get fresh list of services&#10;            var services = discoveryClient.getServices();&#10;            return &quot;Services refreshed: &quot; + services.toString();&#10;        } catch (Exception e) {&#10;            return &quot;Failed to refresh services: &quot; + e.getMessage();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../service-b/src/main/java/com/example/serviceb/ServiceBController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../service-b/src/main/java/com/example/serviceb/ServiceBController.java" />
              <option name="originalContent" value="package com.example.serviceb;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;import org.springframework.web.reactive.function.client.WebClient;&#10;import reactor.core.publisher.Mono;&#10;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/service-b&quot;)&#10;public class ServiceBController {&#10;&#10;    @Autowired&#10;    private WebClient webClient;&#10;    &#10;    @GetMapping(&quot;/response&quot;)&#10;    public String respond() {&#10;        return &quot;Hello from Service B!&quot;;&#10;    }&#10;&#10;    @GetMapping(&quot;/hello&quot;)&#10;    public Mono&lt;String&gt; callServiceA() {&#10;        // Replace the URL with Service A's actual endpoint&#10;        return webClient.get()&#10;                .uri(&quot;http://localhost:8081/service-a/hello&quot;)&#10;                .retrieve()&#10;                .bodyToMono(String.class);&#10;    }&#10;&#10;&#10;}" />
              <option name="updatedContent" value="package com.example.serviceb;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;import org.springframework.web.reactive.function.client.WebClient;&#10;import reactor.core.publisher.Mono;&#10;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/service-b&quot;)&#10;public class ServiceBController {&#10;&#10;    @Autowired&#10;    private WebClient webClient;&#10;    &#10;    @GetMapping(&quot;/response&quot;)&#10;    public String respond() {&#10;        return &quot;Hello from Service B!&quot;;&#10;    }&#10;&#10;    @GetMapping(&quot;/hello&quot;)&#10;    public Mono&lt;String&gt; callServiceA() {&#10;        // Using service name instead of hardcoded URL - Eureka will resolve this&#10;        return webClient.get()&#10;                .uri(&quot;http://service-a/service-a/hello&quot;)&#10;                .retrieve()&#10;                .bodyToMono(String.class);&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../service-b/src/main/java/com/example/serviceb/WebClientConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../service-b/src/main/java/com/example/serviceb/WebClientConfig.java" />
              <option name="originalContent" value="package com.example.serviceb;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.web.reactive.function.client.WebClient;&#10;&#10;@Configuration&#10;public class WebClientConfig {&#10;    @Bean&#10;    public WebClient webClient() {&#10;        return WebClient.builder().build();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.serviceb;&#10;&#10;import org.springframework.cloud.client.loadbalancer.LoadBalanced;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.web.reactive.function.client.WebClient;&#10;&#10;@Configuration&#10;public class WebClientConfig {&#10;    &#10;    @Bean&#10;    @LoadBalanced&#10;    public WebClient.Builder webClientBuilder() {&#10;        return WebClient.builder();&#10;    }&#10;    &#10;    @Bean&#10;    public WebClient webClient(WebClient.Builder builder) {&#10;        return builder.build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../service-b/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../service-b/src/main/resources/application.yml" />
              <option name="originalContent" value="server:&#10;  port: 8082&#10;spring:&#10;  application:&#10;    name: service-b&#10;eureka:&#10;  client:&#10;    service-url:&#10;      defaultZone: http://localhost:8761/eureka&#10;    register-with-eureka: true&#10;    fetch-registry: true&#10;    # Cache control settings&#10;    registry-fetch-interval-seconds: 5    # How often to fetch registry from server (default: 30)&#10;    cache-refresh-executor-thread-pool-size: 2&#10;    disable-delta: true                   # Always fetch full registry instead of deltas&#10;  instance:&#10;    lease-renewal-interval-in-seconds: 5  # How often to renew lease (default: 30)&#10;    lease-expiration-duration-in-seconds: 10  # When server considers client dead (default: 90)&#10;" />
              <option name="updatedContent" value="server:&#10;  port: 8082&#10;spring:&#10;  application:&#10;    name: service-b&#10;eureka:&#10;  client:&#10;    service-url:&#10;      defaultZone: http://localhost:8761/eureka&#10;    register-with-eureka: true&#10;    fetch-registry: true&#10;    # Cache control settings&#10;    registry-fetch-interval-seconds: 5    # How often to fetch registry from server (default: 30)&#10;    cache-refresh-executor-thread-pool-size: 2&#10;    disable-delta: true                   # Always fetch full registry instead of deltas&#10;  instance:&#10;    lease-renewal-interval-in-seconds: 5  # How often to renew lease (default: 30)&#10;    lease-expiration-duration-in-seconds: 10  # When server considers client dead (default: 90)&#10;&#10;# Enable actuator endpoints for cache management&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,refresh,caches&#10;  endpoint:&#10;    health:&#10;      show-details: always" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>