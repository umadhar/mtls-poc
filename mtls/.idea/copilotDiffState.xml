<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/mtls/RestTemplateConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/mtls/RestTemplateConfig.java" />
              <option name="updatedContent" value="package com.example.mtls;&#10;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;&#10;import org.springframework.web.client.RestTemplate;&#10;&#10;import javax.net.ssl.SSLContext;&#10;import java.io.InputStream;&#10;import java.security.KeyStore;&#10;import org.apache.http.conn.ssl.SSLConnectionSocketFactory;&#10;import org.apache.http.impl.client.CloseableHttpClient;&#10;import org.apache.http.impl.client.HttpClients;&#10;import org.apache.http.ssl.SSLContexts;&#10;&#10;@Configuration&#10;public class RestTemplateConfig {&#10;&#10;    @Value(&quot;${resttemplate.ssl.key-store}&quot;)&#10;    private String keyStorePath;&#10;&#10;    @Value(&quot;${resttemplate.ssl.key-store-password}&quot;)&#10;    private String keyStorePassword;&#10;&#10;    @Value(&quot;${resttemplate.ssl.key-store-type}&quot;)&#10;    private String keyStoreType;&#10;&#10;    @Value(&quot;${resttemplate.ssl.trust-store}&quot;)&#10;    private String trustStorePath;&#10;&#10;    @Value(&quot;${resttemplate.ssl.trust-store-password}&quot;)&#10;    private String trustStorePassword;&#10;&#10;    @Value(&quot;${resttemplate.ssl.trust-store-type}&quot;)&#10;    private String trustStoreType;&#10;&#10;    @Bean&#10;    public RestTemplate restTemplate() throws Exception {&#10;        KeyStore keyStore = KeyStore.getInstance(keyStoreType);&#10;        try (InputStream keyStoreStream = getClass().getClassLoader().getResourceAsStream(keyStorePath.replace(&quot;classpath:&quot;, &quot;&quot;))) {&#10;            keyStore.load(keyStoreStream, keyStorePassword.toCharArray());&#10;        }&#10;&#10;        KeyStore trustStore = KeyStore.getInstance(trustStoreType);&#10;        try (InputStream trustStoreStream = getClass().getClassLoader().getResourceAsStream(trustStorePath.replace(&quot;classpath:&quot;, &quot;&quot;))) {&#10;            trustStore.load(trustStoreStream, trustStorePassword.toCharArray());&#10;        }&#10;&#10;        SSLContext sslContext = SSLContexts.custom()&#10;                .loadKeyMaterial(keyStore, keyStorePassword.toCharArray())&#10;                .loadTrustMaterial(trustStore, null)&#10;                .build();&#10;&#10;        SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslContext);&#10;        CloseableHttpClient httpClient = HttpClients.custom()&#10;                .setSSLSocketFactory(socketFactory)&#10;                .build();&#10;&#10;        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory(httpClient);&#10;        return new RestTemplate(factory);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../mtls2/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../mtls2/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;org.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;mtls2&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.1.8&lt;/version&gt;&#10;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;    &lt;/parent&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.apache.httpcomponents.client5&lt;/groupId&gt;&#10;            &lt;artifactId&gt;httpclient5&lt;/artifactId&gt;&#10;            &lt;version&gt;5.3.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.apache.httpcomponents.core5&lt;/groupId&gt;&#10;            &lt;artifactId&gt;httpcore5&lt;/artifactId&gt;&#10;            &lt;version&gt;5.2.4&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;&lt;/project&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;org.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;mtls2&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.1.8&lt;/version&gt;&#10;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;    &lt;/parent&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.apache.httpcomponents.client5&lt;/groupId&gt;&#10;            &lt;artifactId&gt;httpclient5&lt;/artifactId&gt;&#10;            &lt;version&gt;5.3.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.apache.httpcomponents.core5&lt;/groupId&gt;&#10;            &lt;artifactId&gt;httpcore5&lt;/artifactId&gt;&#10;            &lt;version&gt;5.2.4&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../mtls2/src/main/java/org/example/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../mtls2/src/main/java/org/example/Main.java" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(Main.class, args);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../mtls2/src/main/java/org/example/RestTemplateConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../mtls2/src/main/java/org/example/RestTemplateConfig.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;import org.apache.hc.client5.http.classic.CloseableHttpClient;&#10;import org.apache.hc.client5.http.impl.classic.HttpClients;&#10;import org.apache.hc.client5.http.ssl.ClientTlsStrategyBuilder;&#10;import org.apache.hc.core5.http.io.SocketConfig;&#10;import org.apache.hc.core5.ssl.SSLContextBuilder;&#10;import org.apache.hc.core5.ssl.SSLContexts;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;&#10;import org.springframework.web.client.RestTemplate;&#10;&#10;import javax.net.ssl.SSLContext;&#10;import java.io.InputStream;&#10;import java.security.KeyStore;&#10;&#10;@Configuration&#10;public class RestTemplateConfig {&#10;&#10;    @Value(&quot;${resttemplate.ssl.key-store}&quot;)&#10;    private String keyStorePath;&#10;&#10;    @Value(&quot;${resttemplate.ssl.key-store-password}&quot;)&#10;    private String keyStorePassword;&#10;&#10;    @Value(&quot;${resttemplate.ssl.key-store-type}&quot;)&#10;    private String keyStoreType;&#10;&#10;    @Value(&quot;${resttemplate.ssl.trust-store}&quot;)&#10;    private String trustStorePath;&#10;&#10;    @Value(&quot;${resttemplate.ssl.trust-store-password}&quot;)&#10;    private String trustStorePassword;&#10;&#10;    @Value(&quot;${resttemplate.ssl.trust-store-type}&quot;)&#10;    private String trustStoreType;&#10;&#10;    @Bean&#10;    public RestTemplate restTemplate() throws Exception {&#10;        // Load KeyStore&#10;        KeyStore keyStore = KeyStore.getInstance(keyStoreType);&#10;        try (InputStream ksStream = getClass().getClassLoader()&#10;                .getResourceAsStream(keyStorePath.replace(&quot;classpath:&quot;, &quot;&quot;))) {&#10;            keyStore.load(ksStream, keyStorePassword.toCharArray());&#10;        }&#10;&#10;        // Load TrustStore&#10;        KeyStore trustStore = KeyStore.getInstance(trustStoreType);&#10;        try (InputStream tsStream = getClass().getClassLoader()&#10;                .getResourceAsStream(trustStorePath.replace(&quot;classpath:&quot;, &quot;&quot;))) {&#10;            trustStore.load(tsStream, trustStorePassword.toCharArray());&#10;        }&#10;&#10;        // Build SSLContext with TLS 1.3 support&#10;        SSLContext sslContext = SSLContexts.custom()&#10;                .setProtocol(&quot;TLSv1.3&quot;)&#10;                .loadKeyMaterial(keyStore, keyStorePassword.toCharArray())&#10;                .loadTrustMaterial(trustStore, null)&#10;                .build();&#10;&#10;        CloseableHttpClient httpClient = HttpClients.custom()&#10;                .setDefaultSocketConfig(SocketConfig.custom()&#10;                        .setSoTimeout(30_000)&#10;                        .build())&#10;                .setTlsStrategy(ClientTlsStrategyBuilder.create()&#10;                        .setSslContext(sslContext)&#10;                        .build())&#10;                .build();&#10;&#10;        HttpComponentsClientHttpRequestFactory factory =&#10;                new HttpComponentsClientHttpRequestFactory(httpClient);&#10;&#10;        return new RestTemplate(factory);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;&#10;import org.apache.hc.client5.http.impl.classic.HttpClients;&#10;import org.apache.hc.core5.ssl.SSLContexts;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;&#10;import org.springframework.web.client.RestTemplate;&#10;&#10;import javax.net.ssl.SSLContext;&#10;import java.io.InputStream;&#10;import java.security.KeyStore;&#10;&#10;@Configuration&#10;public class RestTemplateConfig {&#10;&#10;    @Value(&quot;${resttemplate.ssl.key-store}&quot;)&#10;    private String keyStorePath;&#10;&#10;    @Value(&quot;${resttemplate.ssl.key-store-password}&quot;)&#10;    private String keyStorePassword;&#10;&#10;    @Value(&quot;${resttemplate.ssl.key-store-type}&quot;)&#10;    private String keyStoreType;&#10;&#10;    @Value(&quot;${resttemplate.ssl.trust-store}&quot;)&#10;    private String trustStorePath;&#10;&#10;    @Value(&quot;${resttemplate.ssl.trust-store-password}&quot;)&#10;    private String trustStorePassword;&#10;&#10;    @Value(&quot;${resttemplate.ssl.trust-store-type}&quot;)&#10;    private String trustStoreType;&#10;&#10;    @Bean&#10;    public RestTemplate restTemplate() throws Exception {&#10;        // Load KeyStore&#10;        KeyStore keyStore = KeyStore.getInstance(keyStoreType);&#10;        try (InputStream ksStream = getClass().getClassLoader()&#10;                .getResourceAsStream(keyStorePath.replace(&quot;classpath:&quot;, &quot;&quot;))) {&#10;            keyStore.load(ksStream, keyStorePassword.toCharArray());&#10;        }&#10;&#10;        // Load TrustStore&#10;        KeyStore trustStore = KeyStore.getInstance(trustStoreType);&#10;        try (InputStream tsStream = getClass().getClassLoader()&#10;                .getResourceAsStream(trustStorePath.replace(&quot;classpath:&quot;, &quot;&quot;))) {&#10;            trustStore.load(tsStream, trustStorePassword.toCharArray());&#10;        }&#10;&#10;        // Build SSLContext with TLS 1.3 support&#10;        SSLContext sslContext = SSLContexts.custom()&#10;                .setProtocol(&quot;TLSv1.3&quot;)&#10;                .loadKeyMaterial(keyStore, keyStorePassword.toCharArray())&#10;                .loadTrustMaterial(trustStore, null)&#10;                .build();&#10;&#10;        CloseableHttpClient httpClient = HttpClients.custom()&#10;                .setSslcontext(sslContext)&#10;                .build();&#10;&#10;        HttpComponentsClientHttpRequestFactory factory =&#10;                new HttpComponentsClientHttpRequestFactory(httpClient);&#10;&#10;        return new RestTemplate(factory);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>